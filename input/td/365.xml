<?xml version="1.0" encoding="utf-8"?>
<technical-decisions  xmlns:h="http://www.w3.org/1999/xhtml" 
		      xmlns="https://niap-ccevs.org/cc/v1">
  <bunch>
    <!-- 
	 Selections with IDs *MUST* have the same IDs as those in the original PP.
    -->
    <applies-to max-inclusive="4.2" name="General Purpose Operating System"/>
    <decision id='365' date="2018.10.12"
	      url="https://www.niap-ccevs.org/Documents_and_Guidance/view_td.cfm?td_id=375">
      <notes>For wrapped keys, destroying the wrapping key should be sufficient.</notes>
          <f-element id="FCS_CKM_EXT.4.1">
	    <title>
The OS shall destroy cryptographic keys and key material in accordance with a specified cryptographic key destruction method 
              <selectables>
		<selectable>For volatile memory, the destruction shall be executed by a 
		<selectables>
		  <selectable>single overwrite consisting of <selectables>
		      <selectable>a pseudo-random pattern using the TSF's RBG</selectable>
		      <selectable>zeroes</selectable>
		      <selectable>ones</selectable>
		      <selectable>a new value of a key</selectable>
		      <selectable><assignable> any value that does not contain any CSP</assignable></selectable></selectables></selectable>
		  <selectable>removal of power to the memory</selectable>
		  <selectable>destruction of reference to the key directly followed by a request for garbage collection</selectable>
		</selectables></selectable>
		<selectable>For non-volatile memory that consists of 
		<selectables>
		  <selectable>destruction of all key encrypting keys protecting the target key according to FCS_CKM_EXT.4.1, where none of the KEKs protecting the target key are derived</selectable>
		  <selectable>the invocation of an interface provided by the underlying platform that <selectables>
		    <selectable>logically addresses the storage location of the key and performs a <selectables>
			<selectable>single</selectable>
			<selectable><assignable>ST author defined multi-pass</assignable></selectable>
		      </selectables>
overwrite consisting of 
                      <selectables>
			<selectable>zeroes</selectable><selectable>ones</selectable>
			<selectable>pseudo-random pattern</selectable>
			<selectable>a new value of a key of the same size</selectable>
			<selectable><assignable>any value that does not contain any CSP</assignable></selectable>
		      </selectables></selectable>
		    <selectable>instructs the underlying platform to destroy the abstraction that represents the key</selectable>
		  </selectables></selectable>
	      </selectables></selectable>
	      </selectables>
	      .
	    </title>
	    <note role="application">
	      <h:p>
The interface referenced in the requirement could take different forms, the most likely of which is an application programming interface to an OS kernel. There may be various levels of abstraction visible. For instance, in a given implementation that overwrites a key stored in non-volatile memory, selection a, the application may have access to the file system details and may be able to logically address specific memory locations. In another implementation that instructions the underlying platform to destroy the representation of a key stored in non-volatile memory, the application may simply have a handle to a resource and can only ask the platform to delete the resource, as may be the case with a platforms secure key store. The latter implementation should only be used for the most restricted access. The level of detail to which the TOE has access will be reflected in the TSS section of the ST.
	      </h:p>
	      <h:p>
Several selections allow assignment of a 'value that does not contain any CSP'. This means that the TOE uses some other specified data not drawn from a source that may contain key material or reveal information about key material, and not being any of the particular values listed as other selection options. The point of the phrase 'does not contain any CSP' is to ensure that the overwritten data is carefully selected, and not taken from a general 'pool' that might contain current or residual data that itself requires confidentiality protection.
	      </h:p>

	      <h:p>
For the selection "destruction of all key encrypting keys protecting target key according to FCS_CKM_EXT.4.1, where none of the KEKs protecting the target key are derived", a key can be considered destroyed by destroying the key that protects the key. If a key is wrapped or encrypted it is not necessary to "overwrite" that key, overwriting the key that is used to wrap or encrypt the key used to encrypt/decrypt data, using the appropriate method for the memory type involved, will suffice. For example, if a product uses a Key Encryption Key (KEK) to encrypt a Data Encryption Key (DEK), destroying the KEK using one of the methods in FCS_CKM_EXT.4 is sufficient, since the DEK would no longer be usable (of course, presumes the DEK is still encrypted and the KEK cannot be recovered or re-derived.).
	      </h:p>
	    </note>

	    <aactivity>
	      <TSS/>
	      <h:p>
The evaluator examines the TSS to ensure it describes how the keys are managed in volatile memory. This description includes details of how each identified key is introduced into volatile memory (e.g. by derivation from user input, or by unwrapping a wrapped key stored in non-volatile memory) and how they are overwritten.
	      </h:p>
	      <h:p>
The evaluator will check to ensure the TSS lists each type of key that is stored in in non-volatile memory, and identifies how the TOE interacts with the underlying platform to manage keys (e.g., store, retrieve, destroy). The description includes details on the method of how the TOE interacts with the platform, including an identification and description of the interfaces it uses to manage keys (e.g., file system APIs, platform key store APIs).
	      </h:p>
	      <h:p>
If the ST makes use of the open assignment and fills in the type of pattern that is used, the evaluator examines the TSS to ensure it describes how that pattern is obtained and used. The evaluator will verify that the pattern does not contain any CSPs.
	      </h:p>
	      <h:p>
The evaluator will check that the TSS identifies any configurations or circumstances that may not strictly conform to the key destruction requirement.
	      </h:p>
	      <h:p>
If the selection "destruction of all key encrypting keys protecting target key according to FCS_CKM_EXT.4.1, where none of the KEKs protecting the target key are derived" is included the evaluator shall examine the TOEâ€™s keychain in the TSS and identify each instance when a key is destroyed by this method. In each instance the evaluator shall verify all keys capable of decrypting the target key are destroyed in accordance with a specified key destruction method in FCS_CKM_EXT.4.1 The evaluator shall verify that all of the keys capable of decrypting the target key are not able to be derived to reestabish the keychain after their destruction.
	      </h:p>


<h:h3>Operational Guidance</h:h3>
	      <h:p>
There are a variety of concerns that may prevent or delay key destruction in some cases. The evaluator will check that the guidance documentation identifies configurations or circumstances that may not strictly conform to the key destruction requirement, and that this description is consistent with the relevant parts of the TSS and any other relevant Required Supplementary Information. The evaluator will check that the guidance documentation provides guidance on situations where key destruction may be delayed at the physical layer and how such situations can be avoided or mitigated if possible.
	      </h:p>
	      <h:p>
Some examples of what is expected to be in the documentation are provided here. 
	      </h:p>
	      <h:p>
When the TOE does not have full access to the physical memory, it is possible that the storage may be implementing wear-leveling and garbage collection. This may create additional copies of the key that are logically inaccessible but persist physically. In this case, to mitigate this the drive should support the TRIM command and implements garbage collection to destroy these persistent copies when not actively engaged in other tasks.
	      </h:p>
	      <h:p>
Drive vendors implement garbage collection in a variety of different ways, as such there is a variable amount of time until data is truly removed from these solutions. There is a risk that data may persist for a longer amount of time if it is contained in a block with other data not ready for erasure. To reduce this risk, the operating system and file system of the OE should support TRIM, instructing the non-volatile memory to erase copies via garbage collection upon their deletion. If a RAID array is being used, only set-ups that support TRIM are utilized. If the drive is connected via PCI-Express, the operating system supports TRIM over that channel.
	      </h:p>
	      <h:p>
The drive should be healthy and contains minimal corrupted data and should be end-of-lifed before a significant amount of damage to drive health occurs, this minimizes the risk that small amounts of potentially recoverable data may remain in damaged areas of the drive.
	      </h:p>
		<testlist>
		  <test>Applied to each key held as in volatile memory and subject to destruction by overwrite by the TOE (whether or not the value is subsequently encrypted for storage in volatile or non-volatile memory). In the case where the only selection made for the destruction method key was removal of power, then this test is unnecessary. The evaluator will:
		  <h:ol>
		    <h:li>Record the value of the key in the TOE subject to clearing.</h:li>
		    <h:li>Cause the TOE to perform a normal cryptographic processing with the key from Step #1.</h:li>
		    <h:li>Cause the TOE to clear the key.</h:li>
		    <h:li>Cause the TOE to stop the execution but not exit.</h:li>
		    <h:li>Cause the TOE to dump the entire memory of the TOE into a binary file.</h:li>
		    <h:li>Search the content of the binary file created in Step #5 for instances of the known key value from Step #1.</h:li>
		  </h:ol>
		  <h:p>
Steps 1-6 ensure that the complete key does not exist anywhere in volatile memory. If a copy is found, then the test fails.
		  </h:p>
</test>
<test>Applied to each key help in non-volatile memory and subject to destruction by the TOE. The evaluator will use special tools (as needed), provided by the TOE developer if necessary, to ensure the tests function as intended.
<h:ol>
  <h:li>Identify the purpose of the key and what access should fail when it is deleted. (e.g. the data encryption key being deleted would cause data decryption to fail.)</h:li>
  <h:li>Cause the TOE to clear the key.</h:li>
  <h:li>Have the TOE attempt the functionality that the cleared key would be necessary for.</h:li>
</h:ol>

<h:p>
  The test succeeds if step 3 fails.
</h:p>
</test>
<h:p>
  Tests 3 and 4 apply only for the selection instructing the underlying platform to destroy the representation of the key, as the TOE has no visibility into the inner workings and completely relies on the underlying platform.
</h:p>
<test>The following tests are used to determine the TOE is able to request the platform to overwrite the key with a TOE supplied pattern.
<h:p>

Applied to each key held in non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator will use a tool that provides a logical view of the media (e.g., MBR file system):
<h:ol>
<h:li>Record the value of the key in the TOE subject to clearing.</h:li>

<h:li>Cause the TOE to perform a normal cryptographic processing with the key from Step #1.</h:li>

<h:li>Cause the TOE to clear the key.</h:li>

<h:li>Search the logical view that the key was stored in for instances of the known key value from Step #1. If a copy is found, then the test fails.</h:li>
</h:ol>
</h:p>
</test>
<test> Applied to each key held as non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator will use a tool that provides a logical view of the media:
<h:ol>
<h:li>Record the logical storage location of the key in the TOE subject to clearing.</h:li>

<h:li>Cause the TOE to perform a normal cryptographic processing with the key from Step #1.</h:li>

<h:li>Cause the TOE to clear the key.</h:li>

<h:li>Read the logical storage location in Step #1 of non-volatile memory to ensure the appropriate pattern is utilized.</h:li>
</h:ol>
<h:p>
  The test succeeds if correct pattern is used to overwrite the key in the memory location. If the pattern is not found the test fails.
</h:p>
</test>
		</testlist>
            </aactivity>
	  </f-element>



    </decision>
  </bunch>
</technical-decisions>
